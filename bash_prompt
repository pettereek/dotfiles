#!/bin/bash

# based om https://github.com/necolas/dotfiles/blob/master/shell/bash_prompt
prompt_git() {
	local s=""
	local branchName=""

	# check if the current directory is in a git repository
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

			# ensure index is up to date
			git update-index --really-refresh -q &>/dev/null

			# check for uncommitted changes in the index
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s="$s+";
			fi

			# check for unstaged changes
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s="$s!";
			fi

			# check for untracked files
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s="$s?";
			fi

			# check for stashed files
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s="$s$";
			fi

		fi

		# get the short symbolic ref
		# if HEAD isn't a symbolic ref, get the short SHA
		# otherwise, just give up
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			printf "(unknown)")"

		[ -n "$s" ] && s="[$s]"

		printf "%s" "$1$branchName$s"
	else
		return
	fi
}

# prompt_working_dir displays the path relative to the git repo, or the current path
prompt_working_dir()
{
	local d=$(dirs +0)
	local c=$1

	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then
		local toplvl=$(git rev-parse --show-toplevel)
		local toplvl=$(basename $toplvl)
		local path=$(git rev-parse --show-prefix)

		# prefix path with "/" when non-empty
		[[ -n "${path}" ]] && path="/${path}"
		[[ "${path}" == */ ]] && path="${path: : -1}"

		d="$toplvl$path"
		c=$2
	fi

	printf "%s" "$c$d"
}

set_prompts() {
	local black=""
	local blue=""
	local bold=""
	local cyan=""
	local green=""
	local purple=""
	local red=""
	local reset=""
	local white=""
	local yellow=""

	local hostStyle=""
	local userStyle=""

	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		tput sgr0 # reset colors

		bold=$(tput bold)
		reset=$(tput sgr0)

		black=$(tput setaf 0)
		blue=$(tput setaf 4)
		cyan=$(tput setaf 6)
		green=$(tput setaf 2)
		purple=$(tput setaf 5)
		red=$(tput setaf 1)
		white=$(tput setaf 7)
		yellow=$(tput setaf 3)
	else
		bold=""
		reset="\e[0m"

		black="\e[1;30m"
		blue="\e[1;34m"
		cyan="\e[1;36m"
		green="\e[1;32m"
		purple="\e[1;35m"
		red="\e[1;31m"
		white="\e[1;37m"
		yellow="\e[1;33m"
	fi

	# build the prompt

	# logged in as root
	if [[ "$USER" == "root" ]]; then
		userStyle="\[$bold$red\]"
	else
		userStyle="\[$green\]"
	fi

	# connected via ssh
	if [[ "$SSH_TTY" ]]; then
		hostStyle="\[$bold$red\]"
	else
		hostStyle="\[$green\]"
	fi

	# set the terminal title to the current working directory
	PS1="${userStyle}\u"; # username
	PS1+="\[$white\]:";
	PS1+="\$(prompt_working_dir \"$green\" \"$purple$bold\")" # working directory
	PS1+="\$(prompt_git \" $reset\")" # git repository details
	PS1+="\n"
	PS1+="\[$reset\]\$ \[$reset\]" # $ (and reset color)

	export PS1
}

set_prompts
unset set_prompts
